import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from langchain import LLMChain, PromptTemplate
from langchain_groq import ChatGroq
import os
import re
import json
from dotenv import load_dotenv
import matplotlib.pyplot as plt

load_dotenv()

# Configurar el modelo LLM
os.environ["GROQ_API_KEY"] = os.getenv("GROQ_API_KEY")
llm = ChatGroq(
    model="gemma2-9b-it",
    temperature=0.7,  # Aumentamos ligeramente la temperatura para respuestas m√°s naturales
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

noticias = [
    "Repsol, entre las 50 empresas que m√°s responsabilidad hist√≥rica tienen en el calentamiento global",
    "Amancio Ortega crea un fondo de 100 millones de euros para los afectados de la dana",
    "Freshly Cosmetics despide a 52 empleados en Reus, el 18% de la plantilla",
    "Wall Street y los mercados globales caen ante la incertidumbre por la guerra comercial y el temor a una recesi√≥n",
    "El mercado de criptomonedas se desploma: Bitcoin cae a 80.000 d√≥lares, las altcoins se hunden en medio de una fren√©tica liquidaci√≥n",
    "Granada retrasa seis meses el inicio de la Zona de Bajas Emisiones, previsto hasta ahora para abril",
    "McDonald's donar√° a la Fundaci√≥n Ronald McDonald todas las ganancias por ventas del Big Mac del 6 de diciembre",
    "El Gobierno autoriza a altos cargos p√∫blicos a irse a Indra, Escribano, CEOE, Barcel√≥, Iberdrola o Airbus",
    "Las aportaciones a los planes de pensiones caen 10.000 millones en los √∫ltimos cuatro a√±os",
]

plantilla_reaccion = """
Eres un analista financiero experto en ESG (Environmental, Social, Governance). 
El usuario ha respondido a la noticia con el siguiente comentario:

Noticia: {noticia}
Comentario: {reaccion}

Analiza el sentimiento y la preocupaci√≥n expresada considerando estos aspectos:
1. Clasifica la preocupaci√≥n principal (Ambiental, Social, Gobernanza o Riesgo)
2. Eval√∫a la profundidad del comentario (superficial, moderado, profundo)
3. Identifica emociones subyacentes (preocupaci√≥n, indiferencia, aprobaci√≥n, etc.)

Si el comentario es superficial (menos de 15 palabras o sin justificaci√≥n), genera UNA SOLA pregunta de seguimiento natural para profundizar en el tema. La pregunta debe ser abierta y relacionada con la categor√≠a detectada.

Si el comentario es adecuado (m√°s de 15 palabras con alguna justificaci√≥n), ofrece un breve reconocimiento y pasa a la siguiente noticia.

Ejemplo de respuesta para comentario superficial:
"Interesante perspectiva. ¬øPodr√≠as contarme m√°s sobre c√≥mo crees que esto afectar√° a [aspecto relacionado con la categor√≠a] a largo plazo?"

Ejemplo de respuesta para comentario adecuado:
"Gracias por compartir tu an√°lisis detallado. Veo que te preocupa especialmente [categor√≠a]. Pasemos a la siguiente noticia."

Respuesta:
"""

prompt_reaccion = PromptTemplate(template=plantilla_reaccion, input_variables=["noticia", "reaccion"])
cadena_reaccion = LLMChain(llm=llm, prompt=prompt_reaccion)

plantilla_perfil = """
Analiza las siguientes respuestas de un inversor a diversas noticias financieras:

{analisis}

Genera un perfil detallado del inversor considerando:
1. Preferencias ESG (Ambiental, Social, Gobernanza)
2. Tolerancia al riesgo
3. Estilo de inversi√≥n (conservador, moderado, agresivo)
4. Preocupaciones principales

Asigna puntuaciones de 0-100 para cada dimensi√≥n ESG y riesgo, donde 100 es m√°xima preocupaci√≥n/aversi√≥n.

Formato de salida:
**Perfil del Inversor**
- Ambiental: [puntuaci√≥n]/100 - [breve explicaci√≥n]
- Social: [puntuaci√≥n]/100 - [breve explicaci√≥n]
- Gobernanza: [puntuaci√≥n]/100 - [breve explicaci√≥n]
- Riesgo: [puntuaci√≥n]/100 - [breve explicaci√≥n]
**Estilo de inversi√≥n**: [descripci√≥n]
"""

prompt_perfil = PromptTemplate(template=plantilla_perfil, input_variables=["analisis"])
cadena_perfil = LLMChain(llm=llm, prompt=prompt_perfil)

# Inicializaci√≥n del estado de la sesi√≥n
if "historial" not in st.session_state:
    st.session_state.historial = []
    st.session_state.contador = 0
    st.session_state.reacciones = []
    st.session_state.esperando_respuesta = False

st.title("ü§ñ Analizador ESG para Inversores")

# Mostrar historial de conversaci√≥n
for mensaje in st.session_state.historial:
    with st.chat_message(mensaje["tipo"], avatar=mensaje.get("avatar", None)):
        st.markdown(mensaje["contenido"])

# L√≥gica principal de la conversaci√≥n
if st.session_state.contador < len(noticias):
    noticia_actual = noticias[st.session_state.contador]
    
    # Mostrar noticia si es el inicio o se acaba de avanzar
    if not st.session_state.esperando_respuesta:
        with st.chat_message("assistant", avatar="ü§ñ"):
            mensaje_noticia = st.markdown(f"üì∞ **Noticia {st.session_state.contador + 1}/{len(noticias)}:**\n\n*{noticia_actual}*\n\n¬øQu√© opinas sobre esta noticia?")
        st.session_state.historial.append({
            "tipo": "assistant", 
            "contenido": f"üì∞ **Noticia {st.session_state.contador + 1}/{len(noticias)}:**\n\n*{noticia_actual}*\n\n¬øQu√© opinas sobre esta noticia?",
            "avatar": "ü§ñ"
        })
        st.session_state.esperando_respuesta = True
    
    # Procesar respuesta del usuario
    if user_input := st.chat_input("Escribe tu respuesta aqu√≠..."):
        with st.chat_message("user", avatar="üë§"):
            st.markdown(user_input)
        st.session_state.historial.append({
            "tipo": "user", 
            "contenido": user_input,
            "avatar": "üë§"
        })
        st.session_state.reacciones.append(user_input)
        
        # Analizar la respuesta
        with st.spinner("Analizando tu respuesta..."):
            respuesta_bot = cadena_reaccion.run(noticia=noticia_actual, reaccion=user_input)
        
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.markdown(respuesta_bot)
        st.session_state.historial.append({
            "tipo": "assistant", 
            "contenido": respuesta_bot,
            "avatar": "ü§ñ"
        })
        
        # Determinar si avanzamos o esperamos m√°s input
        if "siguiente noticia" in respuesta_bot.lower():
            st.session_state.contador += 1
            st.session_state.esperando_respuesta = False
        st.rerun()

else:  # Todas las noticias procesadas - generar perfil
    analisis_total = "\n\n".join([
        f"Noticia: {noticias[i]}\nRespuesta: {st.session_state.reacciones[i]}" 
        for i in range(len(noticias))
    ])
    
    with st.spinner("Generando tu perfil de inversor..."):
        perfil = cadena_perfil.run(analisis=analisis_total)
    
    with st.chat_message("assistant", avatar="ü§ñ"):
        st.markdown(f"## üìä Tu Perfil de Inversor ESG\n\n{perfil}")
    st.session_state.historial.append({
        "tipo": "assistant", 
        "contenido": f"## üìä Tu Perfil de Inversor ESG\n\n{perfil}",
        "avatar": "ü§ñ"
    })

    # Extraer puntuaciones para el gr√°fico
    puntuaciones = {
        "Ambiental": int(re.search(r"Ambiental: (\d+)", perfil).group(1)),
        "Social": int(re.search(r"Social: (\d+)", perfil).group(1)),
        "Gobernanza": int(re.search(r"Gobernanza: (\d+)", perfil).group(1)),
        "Riesgo": int(re.search(r"Riesgo: (\d+)", perfil).group(1)),
    }

    # Crear gr√°fico
    fig, ax = plt.subplots(figsize=(10, 6))
    categorias = list(puntuaciones.keys())
    valores = list(puntuaciones.values())
    bars = ax.bar(categorias, valores, color=['#4CAF50', '#2196F3', '#9C27B0', '#FF9800'])
    
    ax.set_ylabel("Puntuaci√≥n (0-100)", fontsize=12)
    ax.set_title("Perfil ESG y de Riesgo", fontsize=14, pad=20)
    ax.set_ylim(0, 100)
    
    # A√±adir valores en las barras
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height)}',
                ha='center', va='bottom', fontsize=11)
    
    plt.tight_layout()
    st.pyplot(fig)

    # Guardar en Google Sheets
    try:
        creds_json_str = st.secrets["gcp_service_account"]
        creds_json = json.loads(creds_json_str)
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
        client = gspread.authorize(creds)
        
        sheet = client.open('BBDD_RESPUESTAS').sheet1
        fila = st.session_state.reacciones[:]
        fila.extend(valores)
        sheet.append_row(fila)
        
        st.success("‚úÖ Tus respuestas y perfil han sido guardados exitosamente.")
    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al guardar los datos: {str(e)}")
